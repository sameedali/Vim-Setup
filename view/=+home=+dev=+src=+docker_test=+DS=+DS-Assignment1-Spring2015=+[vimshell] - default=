let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <S-Tab> <Plug>delimitMateS-Tab
imap <buffer> <S-BS> <Plug>delimitMateS-BS
inoremap <buffer> <silent> <expr> <Plug>(vimshell_history_neocomplete) neocomplete#start_manual_complete('vimshell/history')
inoremap <buffer> <silent> <expr> <Plug>(vimshell_history_unite) unite#sources#vimshell_history#start_complete(!0)
inoremap <buffer> <silent> <expr> <Plug>(vimshell_delete_forward_line) col('.') == col('$') ? "" : "\lDa"
inoremap <buffer> <silent> <Plug>(vimshell_move_previous_window) p
inoremap <buffer> <silent> <Plug>(vimshell_enter) u:call vimshell#execute_current_line(1)
inoremap <buffer> <silent> <expr> <Plug>(vimshell_delete_backward_word) vimshell#get_cur_text()  == '' ? '' : "\"
inoremap <buffer> <silent> <expr> <Plug>(vimshell_zsh_complete) unite#sources#vimshell_zsh_complete#start_complete(!0)
imap <buffer> <BS> <Plug>(vimshell_delete_backward_char)
nmap <buffer>  <Plug>(vimshell_interrupt)
nmap <buffer>  <Plug>(vimshell_hangup)
nmap <buffer>  <Plug>(vimshell_clear)
nmap <buffer>  <Plug>(vimshell_enter)
nmap <buffer>  <Plug>(vimshell_next_prompt)
nmap <buffer>  <Plug>(vimshell_previous_prompt)
nmap <buffer>  <Plug>(vimshell_paste_prompt)
nmap <buffer>  <Plug>(vimshell_execute_by_background)
nmap <buffer> A <Plug>(vimshell_append_end)
nmap <buffer> E <Plug>(vimshell_move_end_argument)
nmap <buffer> I <Plug>(vimshell_insert_head)
nmap <buffer> Q <Plug>(vimshell_exit)
nmap <buffer> ^ <Plug>(vimshell_move_head)
nmap <buffer> a <Plug>(vimshell_append_enter)
nmap <buffer> cc <Plug>(vimshell_change_line)
nmap <buffer> dd <Plug>(vimshell_delete_line)
nmap <buffer> i <Plug>(vimshell_insert_enter)
nmap <buffer> q <Plug>(vimshell_hide)
nmap <buffer> <Plug>(vimshell_delete_line) <Plug>(vimshell_change_line)
nnoremap <buffer> <expr> <Plug>(vimshell_change_line) vimshell#check_prompt() ? printf('0%dlc$', vimshell#util#strchars( matchstr(getline('.'), b:vimshell.context.prompt_pattern))) : 'ddO'
nnoremap <buffer> <silent> <Plug>(vimshell_paste_prompt) :call vimshell#mappings#_paste_prompt()
nnoremap <buffer> <silent> <Plug>(vimshell_enter) :call vimshell#execute_current_line(0)
imap <buffer>  <Plug>(vimshell_move_head)
imap <buffer>  <Plug>(vimshell_interrupt)
imap <buffer> <silent> g <Plug>delimitMateJumpMany
imap <buffer>  <Plug>(vimshell_delete_backward_char)
imap <buffer> 	 <Plug>(vimshell_command_complete)
imap <buffer>  <Plug>(vimshell_delete_forward_line)
imap <buffer>  <Plug>(vimshell_history_unite)
imap <buffer>  <Plug>(vimshell_enter)
imap <buffer>  <Plug>(vimshell_insert_last_word)
imap <buffer>  <Plug>(vimshell_delete_backward_line)
imap <buffer>  <Plug>(vimshell_delete_backward_word)
imap <buffer> <silent> <expr>  vimshell#mappings#smart_map( "\<Plug>(vimshell_push_current_line)", "\<Plug>(vimshell_execute_by_background)")
imap <buffer> " <Plug>delimitMate"
imap <buffer> ' <Plug>delimitMate'
imap <buffer> ( <Plug>delimitMate(
imap <buffer> ) <Plug>delimitMate)
imap <buffer> [ <Plug>delimitMate[
imap <buffer> ] <Plug>delimitMate]
imap <buffer> ` <Plug>delimitMate`
imap <buffer> { <Plug>delimitMate{
imap <buffer> } <Plug>delimitMate}
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal nobinary
setlocal bufhidden=hide
setlocal buflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=nvi
setlocal conceallevel=3
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'vimshell'
setlocal filetype=vimshell
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=10
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=10
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-,+,\\,!,~
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=2048
if &syntax != 'vimshell'
setlocal syntax=vimshell
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal winfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 5 - ((0 * winheight(0) + 20) / 41)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
5
normal! 010|
lcd /home/dev/src/docker_test/DS/DS-Assignment1-Spring2015
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
